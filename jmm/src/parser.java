
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 02 18:17:07 MDT 2013
//----------------------------------------------------

import AST.*;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Apr 02 18:17:07 MDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\003\002\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\013\003" +
    "\000\002\013\003\000\002\012\003\000\002\012\003\000" +
    "\002\017\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\005\000\002" +
    "\011\003\000\002\010\004\000\002\020\004\000\002\020" +
    "\004\000\002\021\006\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\023\004\000\002\024\004\000" +
    "\002\025\005\000\002\025\006\000\002\026\005\000\002" +
    "\026\004\000\002\027\003\000\002\027\004\000\002\030" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\004\000\002\031\005\000" +
    "\002\031\004\000\002\031\007\000\002\031\011\000\002" +
    "\031\007\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\003" +
    "\000\002\034\003\000\002\034\005\000\002\035\006\000" +
    "\002\035\005\000\002\036\003\000\002\036\003\000\002" +
    "\037\004\000\002\037\004\000\002\037\003\000\002\040" +
    "\003\000\002\040\005\000\002\041\003\000\002\041\005" +
    "\000\002\042\003\000\002\042\005\000\002\043\003\000" +
    "\002\043\005\000\002\043\005\000\002\044\003\000\002" +
    "\044\005\000\002\045\003\000\002\045\005\000\002\046" +
    "\003\000\002\046\003\000\002\047\005\000\002\050\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\014\002\001\027\006\030\005\037\014\043" +
    "\007\001\002\000\004\031\047\001\002\000\004\037\ufff9" +
    "\001\002\000\004\037\ufffa\001\002\000\004\037\ufff8\001" +
    "\002\000\004\031\047\001\002\000\014\002\uffff\027\006" +
    "\030\005\037\014\043\007\001\002\000\014\002\uffea\027" +
    "\uffea\030\uffea\037\uffea\043\uffea\001\002\000\004\033\042" +
    "\001\002\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\020\uffe8\021\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001" +
    "\002\000\004\037\014\001\002\000\014\002\uffee\027\uffee" +
    "\030\uffee\037\uffee\043\uffee\001\002\000\004\037\014\001" +
    "\002\000\014\002\uffec\027\uffec\030\uffec\037\uffec\043\uffec" +
    "\001\002\000\014\002\uffeb\027\uffeb\030\uffeb\037\uffeb\043" +
    "\uffeb\001\002\000\004\002\023\001\002\000\004\002\000" +
    "\001\002\000\004\033\026\001\002\000\004\031\uffe5\001" +
    "\002\000\010\027\006\030\005\034\030\001\002\000\004" +
    "\037\014\001\002\000\004\031\uffe3\001\002\000\006\034" +
    "\034\036\033\001\002\000\006\034\uffe2\036\uffe2\001\002" +
    "\000\006\027\006\030\005\001\002\000\004\031\uffe4\001" +
    "\002\000\006\034\uffe1\036\uffe1\001\002\000\006\034\uffe0" +
    "\036\uffe0\001\002\000\006\033\026\035\041\001\002\000" +
    "\004\031\uffe6\001\002\000\032\002\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035" +
    "\uffe9\037\uffe9\043\uffe9\001\002\000\010\027\006\030\005" +
    "\034\043\001\002\000\004\031\uffde\001\002\000\006\034" +
    "\045\036\033\001\002\000\004\031\uffdd\001\002\000\014" +
    "\002\uffed\027\uffed\030\uffed\037\uffed\043\uffed\001\002\000" +
    "\026\022\066\023\061\024\062\026\060\027\006\030\005" +
    "\031\047\032\051\035\056\037\014\001\002\000\014\002" +
    "\uffdf\027\uffdf\030\uffdf\037\uffdf\043\uffdf\001\002\000\034" +
    "\002\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\037\uffdb\043\uffdb" +
    "\001\002\000\004\035\205\001\002\000\026\022\uffd7\023" +
    "\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\035\uffd7\037\uffd7\001\002\000\004\035\uffcc\001\002\000" +
    "\006\015\173\033\152\001\002\000\030\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\035\uffd5\037\uffd5\001\002\000\004\037\014\001\002" +
    "\000\004\033\200\001\002\000\024\005\115\017\102\033" +
    "\101\035\175\037\014\040\106\041\103\042\117\044\112" +
    "\001\002\000\004\033\074\001\002\000\026\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\035\uffda\037\uffda\001\002\000\030\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\035\uffd6\037\uffd6\001\002\000\026\022\066\023\061\024" +
    "\062\026\060\027\006\030\005\031\047\032\072\035\056" +
    "\037\014\001\002\000\004\035\071\001\002\000\004\035" +
    "\uffcd\001\002\000\026\022\uffd8\023\uffd8\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\037\uffd8\001" +
    "\002\000\030\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\037\uffd3\001" +
    "\002\000\034\002\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc\037" +
    "\uffdc\043\uffdc\001\002\000\026\022\uffd9\023\uffd9\024\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\037" +
    "\uffd9\001\002\000\022\005\115\017\102\033\101\037\014" +
    "\040\106\041\103\042\117\044\112\001\002\000\042\004" +
    "\uffbc\005\uffbc\006\144\007\146\010\147\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\001\002\000\030\011\133\012\132" +
    "\013\134\014\136\015\uffb8\016\uffb8\020\uffb8\021\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\001\002\000\042\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\001\002\000\044\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\173" +
    "\016\uffc2\020\uffc2\021\uffc2\033\152\034\uffc2\035\uffc2\036" +
    "\uffc2\001\002\000\022\005\115\017\102\033\101\037\014" +
    "\040\106\041\103\042\117\044\112\001\002\000\022\005" +
    "\115\017\102\033\101\037\014\040\106\041\103\042\117" +
    "\044\112\001\002\000\042\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\020\ufffc\021\ufffc\034\ufffc\035\ufffc\036\ufffc\001" +
    "\002\000\034\004\141\005\142\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\021\uffba\034\uffba\035" +
    "\uffba\036\uffba\001\002\000\010\034\uffae\035\uffae\036\uffae" +
    "\001\002\000\042\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\020\ufffd\021\ufffd\034\ufffd\035\ufffd\036\ufffd\001\002\000" +
    "\012\021\166\034\uffb1\035\uffb1\036\uffb1\001\002\000\004" +
    "\034\162\001\002\000\042\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\020\uffca\021\uffca\034\uffca\035\uffca\036\uffca\001" +
    "\002\000\042\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000\042" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\001\002\000\042\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\001\002\000\022\005\115\017\102\033\101" +
    "\037\014\040\106\041\103\042\117\044\112\001\002\000" +
    "\010\034\uffb0\035\uffb0\036\uffb0\001\002\000\042\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\001\002\000\042\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\020\uffc3\021\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\001\002\000\020\015\127\016\130\020\uffb5\021\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\001\002\000\014\020\124\021" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\001\002\000\042\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\001\002\000\022\005\115\017\102\033" +
    "\101\037\014\040\106\041\103\042\117\044\112\001\002" +
    "\000\044\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\033\152\034\uffc2\035\uffc2\036\uffc2\001\002\000" +
    "\020\015\127\016\130\020\uffb4\021\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\001\002\000\022\005\115\017\102\033\101\037" +
    "\014\040\106\041\103\042\117\044\112\001\002\000\022" +
    "\005\115\017\102\033\101\037\014\040\106\041\103\042" +
    "\117\044\112\001\002\000\030\011\133\012\132\013\134" +
    "\014\136\015\uffb6\016\uffb6\020\uffb6\021\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\001\002\000\022\005\ufff2\017\ufff2\033\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2\001\002\000" +
    "\022\005\ufff1\017\ufff1\033\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\044\ufff1\001\002\000\022\005\ufff0\017\ufff0\033" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\001\002" +
    "\000\022\005\115\017\102\033\101\037\014\040\106\041" +
    "\103\042\117\044\112\001\002\000\022\005\uffef\017\uffef" +
    "\033\uffef\037\uffef\040\uffef\041\uffef\042\uffef\044\uffef\001" +
    "\002\000\034\004\141\005\142\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\001\002\000\022\005\115\017\102\033\101" +
    "\037\014\040\106\041\103\042\117\044\112\001\002\000" +
    "\022\005\ufff4\017\ufff4\033\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\001\002\000\022\005\ufff3\017\ufff3\033" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3\001\002" +
    "\000\042\004\uffbb\005\uffbb\006\144\007\146\010\147\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb" +
    "\021\uffbb\034\uffbb\035\uffbb\036\uffbb\001\002\000\022\005" +
    "\ufff7\017\ufff7\033\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\044\ufff7\001\002\000\022\005\115\017\102\033\101\037" +
    "\014\040\106\041\103\042\117\044\112\001\002\000\022" +
    "\005\ufff6\017\ufff6\033\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\044\ufff6\001\002\000\022\005\ufff5\017\ufff5\033\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\001\002\000" +
    "\042\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\021" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\001\002\000\030\011\133" +
    "\012\132\013\134\014\136\015\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\001\002\000\024\005\115" +
    "\017\102\033\101\034\153\037\014\040\106\041\103\042" +
    "\117\044\112\001\002\000\042\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\020\uffc4\021\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\001\002\000\006\034\uffc7\036\uffc7\001\002\000\006\034" +
    "\157\036\156\001\002\000\022\005\115\017\102\033\101" +
    "\037\014\040\106\041\103\042\117\044\112\001\002\000" +
    "\042\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\001\002\000\006\034\uffc6" +
    "\036\uffc6\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\020\uffc1\021\uffc1\034\uffc1\035\uffc1\036\uffc1\001" +
    "\002\000\020\022\066\023\061\024\062\026\060\031\047" +
    "\035\056\037\014\001\002\000\030\022\uffd0\023\uffd0\024" +
    "\uffd0\025\164\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\035\uffd0\037\uffd0\001\002\000\020\022\066\023\061\024" +
    "\062\026\060\031\047\035\056\037\014\001\002\000\030" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\035\uffcf\037\uffcf\001\002\000\022" +
    "\005\115\017\102\033\101\037\014\040\106\041\103\042" +
    "\117\044\112\001\002\000\014\020\124\021\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\001\002\000\042\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\021\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\001\002\000\004\034\172\001\002\000\042\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\001\002\000\022\005\115\017\102\033" +
    "\101\037\014\040\106\041\103\042\117\044\112\001\002" +
    "\000\010\034\uffaf\035\uffaf\036\uffaf\001\002\000\030\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\035\uffd1\037\uffd1\001\002\000\004\035" +
    "\177\001\002\000\030\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\035\uffd2\037" +
    "\uffd2\001\002\000\022\005\115\017\102\033\101\037\014" +
    "\040\106\041\103\042\117\044\112\001\002\000\004\034" +
    "\202\001\002\000\020\022\066\023\061\024\062\026\060" +
    "\031\047\035\056\037\014\001\002\000\030\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\035\uffce\037\uffce\001\002\000\004\035\041\001" +
    "\002\000\030\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\035\uffd4\037\uffd4\001" +
    "\002\000\014\002\uffe7\027\uffe7\030\uffe7\037\uffe7\043\uffe7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\030\003\021\005\010\006\015\007\017\010" +
    "\020\011\012\012\014\017\016\020\003\024\011\025\007" +
    "\001\001\000\004\026\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\047\001\001" +
    "\000\024\006\045\007\017\010\020\011\012\012\014\017" +
    "\016\020\003\024\011\025\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\036\021" +
    "\037\001\001\000\002\001\001\000\006\011\023\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\026\022\030\023\031\001\001\000\004\011" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\026\023\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\026\022" +
    "\043\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\067\011" +
    "\054\012\056\026\063\027\064\030\062\031\052\032\051" +
    "\035\053\047\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\203\001" +
    "\001\000\002\001\001\000\042\004\112\011\077\013\110" +
    "\033\117\035\076\036\113\037\122\040\074\041\103\042" +
    "\075\043\120\044\121\045\106\046\104\047\115\050\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\067\011\054\012\056\026\063\030\072" +
    "\031\052\032\051\035\053\047\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\112\011" +
    "\077\013\110\033\117\035\076\036\113\037\122\040\074" +
    "\041\103\042\075\043\120\044\121\045\106\046\104\047" +
    "\115\050\107\001\001\000\004\014\144\001\001\000\004" +
    "\016\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\112\011\077\013\110\033\117\035\076\036\113" +
    "\037\122\040\074\041\103\042\075\043\120\044\121\045" +
    "\106\046\104\047\115\050\170\001\001\000\020\004\112" +
    "\011\124\013\110\033\117\035\076\036\113\037\167\001" +
    "\001\000\002\001\001\000\004\015\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\112\011\124\013\110\033" +
    "\117\035\076\036\113\037\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\112\011\124" +
    "\013\110\033\117\035\076\036\113\037\122\040\074\041" +
    "\103\042\075\043\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\112\011\124\013\110\033\117\035" +
    "\076\036\113\037\122\040\074\041\103\042\150\001\001" +
    "\000\026\004\112\011\124\013\110\033\117\035\076\036" +
    "\113\037\122\040\074\041\103\042\130\001\001\000\004" +
    "\016\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\112\011\124\013\110\033\117" +
    "\035\076\036\113\037\122\040\074\041\136\001\001\000" +
    "\002\001\001\000\004\015\137\001\001\000\022\004\112" +
    "\011\124\013\110\033\117\035\076\036\113\037\122\040" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\144\001\001\000\002\001\001\000\020\004\112\011" +
    "\124\013\110\033\117\035\076\036\113\037\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\134\001\001\000\044\004\112\011\077\013\110" +
    "\033\117\034\154\035\076\036\113\037\122\040\074\041" +
    "\103\042\075\043\120\044\121\045\106\046\104\047\115" +
    "\050\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\112\011\077\013\110\033\117" +
    "\035\076\036\113\037\122\040\074\041\103\042\075\043" +
    "\120\044\121\045\106\046\104\047\115\050\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\054\026\063\031\162\032\051\035\053\047\066" +
    "\001\001\000\002\001\001\000\016\011\054\026\063\031" +
    "\164\032\051\035\053\047\066\001\001\000\002\001\001" +
    "\000\032\004\112\011\124\013\110\033\117\035\076\036" +
    "\113\037\122\040\074\041\103\042\075\043\120\044\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\112\011\077\013\110" +
    "\033\117\035\076\036\113\037\122\040\074\041\103\042" +
    "\075\043\120\044\121\045\106\046\173\047\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\112\011\077\013\110\033\117" +
    "\035\076\036\113\037\122\040\074\041\103\042\075\043" +
    "\120\044\121\045\106\046\104\047\115\050\200\001\001" +
    "\000\002\001\001\000\016\011\054\026\063\031\202\032" +
    "\051\035\053\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("Error");
		if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if (s.left >= 0) {
			m.append(" in line "+(s.left+1));
				if (s.right >= 0)
				m.append(", column "+(s.right+1));
				}
		}
		m.append(" : "+message);
		System.err.println(m);
		}
		
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= assignmentexpression 
            {
              Expression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignmentexpression a1 = (Assignmentexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ExpressionDerived1(a1); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment ::= identifier EQ assignmentexpression 
            {
              Assignment RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignmentexpression a2 = (Assignmentexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AssignmentDerived1(i1, a2); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignmentexpression ::= assignment 
            {
              Assignmentexpression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment a1 = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AssignmentexpressionDerived2(a1); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*assignmentexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignmentexpression ::= conditionalorexpression 
            {
              Assignmentexpression RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Conditionalorexpression c1 = (Conditionalorexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AssignmentexpressionDerived1(c1); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*assignmentexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditionalorexpression ::= conditionalorexpression OR conditionalandexpression 
            {
              Conditionalorexpression RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Conditionalorexpression c1 = (Conditionalorexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Conditionalandexpression c2 = (Conditionalandexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConditionalorexpressionDerived2(c1, c2); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*conditionalorexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditionalorexpression ::= conditionalandexpression 
            {
              Conditionalorexpression RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Conditionalandexpression c1 = (Conditionalandexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConditionalorexpressionDerived1(c1); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*conditionalorexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditionalandexpression ::= conditionalandexpression AND equalityexpression 
            {
              Conditionalandexpression RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Conditionalandexpression c1 = (Conditionalandexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Equalityexpression e2 = (Equalityexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConditionalandexpressionDerived2(c1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*conditionalandexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditionalandexpression ::= equalityexpression 
            {
              Conditionalandexpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Equalityexpression e1 = (Equalityexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ConditionalandexpressionDerived1(e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*conditionalandexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // equalityexpression ::= equalityexpression NE relationalexpression 
            {
              Equalityexpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Equalityexpression e1 = (Equalityexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Relationalexpression r2 = (Relationalexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EqualityexpressionDerived3(e1, r2); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*equalityexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // equalityexpression ::= equalityexpression EQ relationalexpression 
            {
              Equalityexpression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Equalityexpression e1 = (Equalityexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Relationalexpression r2 = (Relationalexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EqualityexpressionDerived2(e1, r2); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*equalityexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // equalityexpression ::= relationalexpression 
            {
              Equalityexpression RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Relationalexpression r1 = (Relationalexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new EqualityexpressionDerived1(r1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*equalityexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relationalexpression ::= relationalexpression relationalop additiveexpression 
            {
              Relationalexpression RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Relationalexpression r1 = (Relationalexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Additiveexpression a3 = (Additiveexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new RelationalexpressionDerived2(r1, r2, a3); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*relationalexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relationalexpression ::= additiveexpression 
            {
              Relationalexpression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Additiveexpression a1 = (Additiveexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new RelationalexpressionDerived1(a1); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*relationalexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additiveexpression ::= additiveexpression addop multiplicativeexpression 
            {
              Additiveexpression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Additiveexpression a1 = (Additiveexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Multiplicativeexpression m3 = (Multiplicativeexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AdditiveexpressionDerived2(a1, a2, m3); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*additiveexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additiveexpression ::= multiplicativeexpression 
            {
              Additiveexpression RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Multiplicativeexpression m1 = (Multiplicativeexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AdditiveexpressionDerived1(m1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*additiveexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // multiplicativeexpression ::= multiplicativeexpression mulop unaryexpression 
            {
              Multiplicativeexpression RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Multiplicativeexpression m1 = (Multiplicativeexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int u3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int u3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Unaryexpression u3 = (Unaryexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new MultiplicativeexpressionDerived2(m1, m2, u3); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*multiplicativeexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiplicativeexpression ::= unaryexpression 
            {
              Multiplicativeexpression RESULT = null;
		int u1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int u1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Unaryexpression u1 = (Unaryexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new MultiplicativeexpressionDerived1(u1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*multiplicativeexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unaryexpression ::= postfixexpression 
            {
              Unaryexpression RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Postfixexpression p1 = (Postfixexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new UnaryexpressionDerived3(p1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*unaryexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unaryexpression ::= NOT unaryexpression 
            {
              Unaryexpression RESULT = null;
		int u1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int u1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Unaryexpression u1 = (Unaryexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new UnaryexpressionDerived2(u1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*unaryexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unaryexpression ::= MINUS unaryexpression 
            {
              Unaryexpression RESULT = null;
		int u1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int u1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Unaryexpression u1 = (Unaryexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new UnaryexpressionDerived1(u1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*unaryexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // postfixexpression ::= identifier 
            {
              Postfixexpression RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PostfixexpressionDerived2(i1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*postfixexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // postfixexpression ::= primary 
            {
              Postfixexpression RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Primary p1 = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PostfixexpressionDerived1(p1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*postfixexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // functioninvocation ::= identifier LP RP 
            {
              Functioninvocation RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new FunctioninvocationDerived2(i1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*functioninvocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functioninvocation ::= identifier LP argumentlist RP 
            {
              Functioninvocation RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Argumentlist a2 = (Argumentlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FunctioninvocationDerived1(i1, a2); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*functioninvocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // argumentlist ::= argumentlist COMMA expression 
            {
              Argumentlist RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argumentlist a1 = (Argumentlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ArgumentlistDerived2(a1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*argumentlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // argumentlist ::= expression 
            {
              Argumentlist RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new ArgumentlistDerived1(e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*argumentlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= functioninvocation 
            {
              Primary RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Functioninvocation f1 = (Functioninvocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PrimaryDerived4(f1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary ::= LP expression RP 
            {
              Primary RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new PrimaryDerived3(e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= literal2 
            {
              Primary RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PrimaryDerived2(l1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primary ::= literal1 
            {
              Primary RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Literal1 l1 = (Literal1)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new PrimaryDerived1(l1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statementexpression ::= functioninvocation 
            {
              Statementexpression RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Functioninvocation f1 = (Functioninvocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementexpressionDerived2(f1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*statementexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statementexpression ::= assignment 
            {
              Statementexpression RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment a1 = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementexpressionDerived1(a1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*statementexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= WHILE LP expression RP statement 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementDerived9(e1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= IF LP expression RP statement ELSE statement 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s3 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementDerived8(e1, s2, s3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= IF LP expression RP statement 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementDerived7(e1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= RETURN SEMI 
            {
              Statement RESULT = null;
		 RESULT=new StatementDerived6(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= RETURN expression SEMI 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new StatementDerived5(e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= BREAK SEMI 
            {
              Statement RESULT = null;
		 RESULT=new StatementDerived4(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= statementexpression SEMI 
            {
              Statement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statementexpression s1 = (Statementexpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new StatementDerived3(s1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= SEMI 
            {
              Statement RESULT = null;
		 RESULT=new StatementDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= block 
            {
              Statement RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StatementDerived1(b1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // blockstatement ::= statement 
            {
              Blockstatement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BlockstatementDerived2(s1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*blockstatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // blockstatement ::= variabledeclaration 
            {
              Blockstatement RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BlockstatementDerived1(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*blockstatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // blockstatements ::= blockstatements blockstatement 
            {
              Blockstatements RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blockstatements b1 = (Blockstatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Blockstatement b2 = (Blockstatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BlockstatementsDerived2(b1, b2); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*blockstatements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // blockstatements ::= blockstatement 
            {
              Blockstatements RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Blockstatement b1 = (Blockstatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new BlockstatementsDerived1(b1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*blockstatements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= OPENBRACE CLOSEBRACE 
            {
              Block RESULT = null;
		 RESULT=new BlockDerived2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= OPENBRACE blockstatements CLOSEBRACE 
            {
              Block RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Blockstatements b1 = (Blockstatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new BlockDerived1(b1); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mainfunctiondeclarator ::= identifier LP formalparameterlist RP 
            {
              Mainfunctiondeclarator RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formalparameterlist f2 = (Formalparameterlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new MainfunctiondeclaratorDerived2(i1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*mainfunctiondeclarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainfunctiondeclarator ::= identifier LP RP 
            {
              Mainfunctiondeclarator RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new MainfunctiondeclaratorDerived1(i1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*mainfunctiondeclarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainfunctiondeclaration ::= mainfunctiondeclarator block 
            {
              Mainfunctiondeclaration RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mainfunctiondeclarator m1 = (Mainfunctiondeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new MainFunction(m1, b2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*mainfunctiondeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formalparameter ::= type identifier 
            {
              Formalparameter RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormalparameterDerived1(t1, i2); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*formalparameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formalparameterlist ::= formalparameterlist COMMA formalparameter 
            {
              Formalparameterlist RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formalparameterlist f1 = (Formalparameterlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Formalparameter f2 = (Formalparameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormalparameterlistDerived2(f1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formalparameterlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formalparameterlist ::= formalparameter 
            {
              Formalparameterlist RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Formalparameter f1 = (Formalparameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FormalparameterlistDerived1(f1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*formalparameterlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functiondeclarator ::= identifier LP RP 
            {
              Functiondeclarator RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new FunctionWithNoParm(i1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*functiondeclarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functiondeclarator ::= identifier LP formalparameterlist RP 
            {
              Functiondeclarator RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formalparameterlist f2 = (Formalparameterlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new FunctionWithParm(i1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*functiondeclarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functionheader ::= typevoid functiondeclarator 
            {
              Functionheader RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Functiondeclarator f2 = (Functiondeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionheaderDerived2(t1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*functionheader*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functionheader ::= type functiondeclarator 
            {
              Functionheader RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Functiondeclarator f2 = (Functiondeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionheaderDerived1(t1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*functionheader*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functiondeclaration ::= functionheader block 
            {
              Functiondeclaration RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Functionheader f1 = (Functionheader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new FunctionDecl(f1, b2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*functiondeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier ::= ID 
            {
              Identifier RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Identifier(val); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variabledeclaration ::= type identifier SEMI 
            {
              Variabledeclaration RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new VariableDecl(t1, i2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*variabledeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globaldeclaration ::= mainfunctiondeclaration 
            {
              Globaldeclaration RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Mainfunctiondeclaration m1 = (Mainfunctiondeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GlobalMainFunctionDecl(m1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*globaldeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // globaldeclaration ::= functiondeclaration 
            {
              Globaldeclaration RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Functiondeclaration f1 = (Functiondeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GlobalFunctionDecl(f1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*globaldeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globaldeclaration ::= variabledeclaration 
            {
              Globaldeclaration RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Variabledeclaration v1 = (Variabledeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GlobalVariableDecl(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*globaldeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globaldeclarations ::= globaldeclarations globaldeclaration 
            {
              Globaldeclarations RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Globaldeclarations g1 = (Globaldeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Globaldeclaration g2 = (Globaldeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new GlobaldeclarationsDerived1(g1, g2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*globaldeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globaldeclarations ::= globaldeclaration 
            {
              Globaldeclarations RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Globaldeclaration g1 = (Globaldeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Global(g1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*globaldeclarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relationalop ::= GE 
            {
              String RESULT = null;
		 RESULT="ge"; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*relationalop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relationalop ::= LE 
            {
              String RESULT = null;
		 RESULT="le"; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*relationalop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relationalop ::= GT 
            {
              String RESULT = null;
		 RESULT="gt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*relationalop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relationalop ::= LT 
            {
              String RESULT = null;
		 RESULT="lt"; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*relationalop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // addop ::= MINUS 
            {
              String RESULT = null;
		 RESULT="sub"; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*addop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // addop ::= PLUS 
            {
              String RESULT = null;
		 RESULT="add"; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*addop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mulop ::= PER 
            {
              String RESULT = null;
		 RESULT="per"; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mulop ::= SLASH 
            {
              String RESULT = null;
		 RESULT="div"; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mulop ::= MULT 
            {
              String RESULT = null;
		 RESULT="mul"; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typevoid ::= VOID 
            {
              String RESULT = null;
		 RESULT="void"; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*typevoid*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              String RESULT = null;
		 RESULT="int"; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= BOOLEAN 
            {
              String RESULT = null;
		 RESULT="bool"; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal2 ::= FALSE 
            {
              String RESULT = null;
		 RESULT="false"; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*literal2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal2 ::= TRUE 
            {
              String RESULT = null;
		 RESULT="true"; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*literal2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal1 ::= STRING 
            {
              Literal1 RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new StringVal(val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal1 ::= NUMBER 
            {
              Literal1 RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new Constant(val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*literal1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // st ::= globaldeclarations 
            {
              St RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Globaldeclarations g1 = (Globaldeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new AllGlobals(g1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*st*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= st EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		St start_val = (St)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // st ::= 
            {
              St RESULT = null;
		 RESULT=new StDerived1(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*st*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

